x-app-base: &app-base
  image: jira-clone:latest
  environment:
    DATABASE_URL: postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@jira_db:5432/${DATABASE_NAME}
    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
    CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
    UPSTASH_REDIS_REST_URL: "http://redis_proxy:8000"
    UPSTASH_REDIS_REST_TOKEN: ${UPSTASH_REDIS_REST_TOKEN}
  depends_on:
    jira_db:
      condition: service_healthy  
    redis_proxy:
      condition: service_started

services:

  jira_db:
    image: postgres:latest
    hostname: jira_db
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - jira_data:/var/lib/postgresql/data/
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 2s
      retries: 20

  migrate:
    image: jira-clone-migrate:latest
    environment: 
      DATABASE_URL: postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@jira_db:5432/${DATABASE_NAME}
    depends_on:
      jira_db:
        condition: service_healthy
    restart: "no"

  redis:
    image: redis:latest
    volumes:
      - redis_data:/data
  
  redis_proxy:
    image: upstash-local:latest
    environment:
      UPSTASH_TOKEN: ${UPSTASH_REDIS_REST_TOKEN}
      SERVER_ADDRESS: ":8000"
      REDIS_ADDRESS: "redis:6379"
    ports:
      - '8001:8000'
    depends_on:
      - redis
      
  app1:
    <<: *app-base
    ports:
      - '3001:3000'
  
  app2:
    <<: *app-base
    ports:
      - '3002:3000'

  nginx:
    image: nginx:latest
    ports:
      - '8080:80'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - app1
      - app2


  
volumes:
  jira_data:
  redis_data:
